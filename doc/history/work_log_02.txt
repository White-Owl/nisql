------------- Day 02
Create a project on github - done.
Accept teammates as contributers - done.
Add various folders (like doc, tests, etc) into project - done.
Add stubs for main.cpp - done.
Time to write some code...

Question of the day: how do we decript the command line arguments
and what kind of arguments they should be?
Option 1: follow the general style of getopt()/getopt_long() (and use them)
Option 2: use boost/program_options
Option 3: find something class on the github which do the work without other
pieces which boost has.
Option 4: write something else.

The 1st option is tempting, but it is not in C++ spirit. The 2nd one would
require a whole boost library, which we (most likely) would not need in
other parts of the project. The 3rd one... Let's try.
Well, there are several such classes on the web, most of them follow the
general guide lines of getopt(). But do we really need multiple keys? And the
difficult part of using the existing classes for deciphering command-line
arguments is that all of them expect the list of accepted aruments to be
defined beforehand. So which arguments do we need?

To do the work we absolutly need three arguments for NISQL:
 - Where to connect and how?
 - Which query to execute?
 - Where to write the result?
The first question is easy - since we are using ODBC, then the first
parameter should be an ODBC style 'connection string'. It is already
described in documentation for SQLDriverConnect() function and all connection
options are deciphered by individual ODBC drivers (and described in their
documentation).
The second question is also kinda easy: it should be either name of the DB
object (like name of the table, view, or procedure), a sql-script file, or
a query. But all of them are just one parameter.
And where to write the result? That is the hardest question of all. In the
simpliest case (with just one resultset) we can just specify a file name with
one of the known extentions (.txt, .csv, .xml, or .json) and we would know
where and how to write the data. But then it is possible to have a script
which returns two (three, ten) resultsets and we need to specify names for
each of the file. And what if a user of NISQL forget to specify name for the
second file, but the query gives two resultsets? Where (and how) to write the
extra resultsets?

Leaving the last question aside, for now, we can see that we always need
three arguments (so we do not need a key for them, if they are ordered).
And we would need at least two optional keys (one to specify parameters for
printer, and another for general verbosity).
And the final answer for the question of command-line is, the usage for the
NISQL would be:
  nisql ODBC-connection-string query-in-some-form output-file [options]
where options are:
  -v enable verbose execution
  -f"text" define parameters for the printer
And to be consistent, in the definition of printer parameters we should use
the same style as ODBC connection uses: KEY1=value;KEY2=value;KEY3=value

With all that in mind, the answer to the intial question on how to decipher
the command-line arguments comes in a form: write something ourself, it
is a very simple set of arguments wich requires a very simple code to
recognize.

Function read_arguments() - done.
The supplimentary function show_usage() actually takes much more time to
write, and most likely would be modified as we develop the actual printer
classes.
