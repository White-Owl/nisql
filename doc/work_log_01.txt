------------- Day 01 (which actually took several days)
Project is approved, so lets decide the workload:

The major parts of NISQL as we see them now:
 - general structure of the application
 - command-line decoder
 - communication with the database
 - factory of printers
 - CSV printer
 - XML printer
 - JSON printer
 - TXT printer
 - some other printer (if we have time)

 -- Documentation!
Including description of the application and description of use cases.

 -- Test cases.
That should include SQL code in different SQL dialects (T-SQL, PL/SQL,
etc) for all database servers we can find.


First is one of the major pieces: communication with databases.
It was decided early on (from the day of the proposal) that the NISQL should
use ODBC as primary communication protocol. Since it is the most universal
one. It exists for almost all databases (even file-based ones like xBase),
and it is OS universal - it is standard on Windows and has several
implementations on *nix and Mac OSes.
But should we use ODBC directly? No, that would be a C code which is not in
a spirit of this exercise.
Should we make our own wrapper over ODBC (or parts of it) or should we use
one of the existing wrappers? After discussion with TA - conclusion is: use
the existing library, since full scale C++ wrapper over ODBC can be a class
project on its own, but there are a lot of such wrappers on the sourceforge.
Some quick search over sourceforge and github provides an answer: nanodbc.
The nanodbc provides a full coverage over ODBC and it has the MIT license.

Second DB related issue: the mock data to be used in testing.
We considered several 'datasets for students' without any clear winners.
All free datasets on the web are either huge, or just one-table datasets.
We on the other hand, need a combination of tables, views, and stored
procedures. With different data types (strings, fixed point numbers,
real numbers, dates, times). This does look like a set of data which can
be found in a text book on databases. And yes, we did took a class
COMS S4111 Database Systems which used a book like that with datasets
and exercises in SQL - those we can use as source for our own test cases.

Everything else can (and should) be written by us.
