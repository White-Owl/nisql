Proposal for final project for class COMS W4995 Design Using C++
Spring 2018

Students:
George Brink, gb2641
Rachel Winsho Wu, rww2115
Amanuel Lemenih, aml2303


NISQL

NISQL (Non-Interactive SQL), is an application which connects to database chosen as command line parameter, executes a SQL query passed to the application from command line and writes down the resultset in a file, name and format of the file is also chosen from the command line.

Such application can be used in real life as a tool for scheduling reports from database. For example it can be used from a shell script:
---
#!/bin/sh
nisql -c”connection to DB” -q”sql query” -f”formatting options” -o”output file name”
mail -s”daily report” -a”output file name” user@company.com
---
Put that script into cron (or any other scheduling system) and it will send to the specified email result of the query. The format of the output file can be any known format for data transfer.

Almost all database systems have a tool which can be used in such manner (i.e. isql for Sybase ASE, sqlcmd for MS SQL Server, sqlplus for Oracle) but all of them have one flaw – the output from the query they provided are just fixed-width format text file. That file can be converted into any of the commonly used data transfer format, but it would require additional programming. Also, all these tools are specific to the database server they come with and scripts, which they are used from, are not easily transferable to a different database system.

The proposed nisql will use widely used database connection protocol ODBC, which eliminate a need to adjust between databases.
It would also know several different formats of the output files. For the first version of nisql we propose CSV, XML, and JSON.


Such approach to scheduled reporting is already tested with great results with application: export2csv. This application has just one output format CSV. But showed a great results in all other areas. It can work with any SQL query (be it passed from command-line, or from a text file, or even as a simple name of the table, view, or stored procedure). It also can provide different flavors of CSV (with or without headers, use commas as field delimiters or other characters, etc).
The export2csv application is written by member of our group in C, and can be used as a measurement point for comparison for ease of coding similar applications between C and C++.
The proposed application cannot be used for run-time efficiency testing, since the slowest part of run-time is database server and communication with it, which we cannot improve by rewriting the client-side application.

The generalized algorithm for nisql application is:
-  Decrypt command line parameters. If the query is just a name of the table or name of the stored procedure – recognize it and surround it with the appropriate SQL keywords (for example: select * from $table). If the requested query is a name of file – read that file and use the contents as a SQL statement. Or just use the query from command line as is (useful for simple selects from tables with conditioning or executing stored procedures with parameters).
- Connect to database and execute the SQL query.
- Using a class-factory, create a formater object, and pass to it formatting options (for example: with or without headers for CSV, use newlines and spaces to format XML or write it as one long line, etc)
- Pass the resultest from the database server into formatter. If the query produces several resultsets – run the formatter several times (ot inform the formatter that there is another data segment is coming).
- The formatter would write the resultset into file. If there are several resultsets – it could be just one continues file with data segments, or several files (that should choseable as one of formatting options).
- Once the resultset is done and database server informs the application that query is completed -  close the application.
Of course, proper error handling with detailed explanation of what went wrong is expected in all steps.
